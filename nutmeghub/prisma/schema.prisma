datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @unique
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires      DateTime
}

model User {
  id            String    @id @default(cuid())
  name          String    @unique
  email         String?   @unique
  emailVerified DateTime?
  iconUrl       String
  Type          Boolean
  accounts      Account[]
  sessions      Session[]
  posted        Posted[]
}
model VerificationToken {
  identifier   String
  token        String   @unique
  expires      DateTime

  @@unique([identifier, token])
}

model Posted {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  userId        String
  position      String
  imageUrl      String
  description   String
  likes         Like[]
  comments      Comment[]
  posted        User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Like {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  userId        String
  postId        String
  posted        Posted @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
}

model Comment {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  userId        String
  postId        String
  posted        Posted @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment       String
}
